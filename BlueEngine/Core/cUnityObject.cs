//----------------------------------------------------------------------------------------------------
// cUnityObject
// : 유니티 오브젝트
//  -JHL-2012-02-23
//----------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Text;
using System.Net.Sockets;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

namespace BlueEngine
{
	//----------------------------------------------------------------------------------------------------
	/// <summary>
	/// Unity 컴포넌트 제작을 위한 객체.
	/// </summary>
	//----------------------------------------------------------------------------------------------------
    public class cUnityObject : MonoBehaviour
	{
		//----------------------------------------------------------------------------------------------------
		#region 변수
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 유니크한 아이디 생성을 위한 정적 변수.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		protected	static	uint							s_unique_id		= 0;
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 인스턴스 리스트.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		protected	static	Dictionary<uint,cUnityObject>	s_instances		= new Dictionary<uint,cUnityObject>();
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 아이디.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		protected			uint							m_id;
		#endregion

		//----------------------------------------------------------------------------------------------------
		#region 속성
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 새로운 유니크한 아이디를 얻는다.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		static	uint							UniqueID		{get{return ++s_unique_id;}}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 아이디.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public				uint							ID				{get{return m_id; }set{m_id=value;}}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 인스턴스 리스트.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		static	Dictionary<uint,cUnityObject>	Instances		{get{return s_instances;}}
		#endregion

		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 최초 활성화될때 호출됨
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public virtual void Awake()
		{
			m_id = UniqueID;
		}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 활성화.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public virtual void OnEnable()
		{
			// 게임오브젝트 활성
			if( gameObject.active )
			{
				AddInstance( m_id, this );
			}
			else
			// 게임오브젝트 비활성
			{
				RemoveInstance( m_id );
			}
		}
		
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 비활성화 : OnDestroy()가 작동하지 않을때 사용할 수 있음.
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public virtual void OnDisable()
		{
			RemoveInstance( m_id );
		}

		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 파괴
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public virtual void OnDestroy()
		{
			RemoveInstance( m_id );
		}

        //----------------------------------------------------------------------------------------------------
		#region 인스턴스 함수
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	인스턴스 추가.
		/// </summary>
		/// <param name="id">cUnityObject 아이디.</param>
		/// <param name="value">cUnityObject 인스턴스.</param>
        //----------------------------------------------------------------------------------------------------
		public static void AddInstance( uint id, cUnityObject value )
		{
			lock(s_instances)
			{
				s_instances.Add( id, value );
			}
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	인스턴스 삭제.
		/// </summary>
		/// <param name="id">삭제할 cUnityObject 아이디.</param>
        //----------------------------------------------------------------------------------------------------
		public static void RemoveInstance( uint id )
		{
			//cUnityObject value=null;
			lock(s_instances)
			{
				//if( s_instances.ContainsKey( id ) )
				{
					s_instances.Remove( id );
				}
			}
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	인스턴스를 얻어온다.
		/// </summary>
		/// <param name="id">얻어올 cUnityObject 아이디.</param>
		/// <param name="value">출력될 cUnityObject.</param>
		/// <returns>성공 유무.</returns>
        //----------------------------------------------------------------------------------------------------
		public static bool GetInstance( uint id, out cUnityObject value )
		{
			lock(s_instances)
			{
				return s_instances.TryGetValue( id, out value );
			}
		}
		#endregion

		//----------------------------------------------------------------------------------------------------
 		#region 예외
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public virtual Exception Exception()
        {
            return Exception("");
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public virtual Exception Exception( params object[] values )
        {
            return new Exception( cLog.LogToString( 2, name + " > " + cObject.ValueToString(values) ) );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 로그
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지 로그를 기록한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Log( params object[] values )
        {
            cLog.Log( name + " > " + cObject.ValueToString(values) );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 메시지 출력
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지를 콘솔창에 출력 한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Print( params object[] values )
        {
            Debug.Log( name + " > " + cObject.ValueToString(values) );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 에러메시지를 콘솔창에 출력 한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Error( params object[] values )
        {
            Debug.LogError( "error : " + name + " > " + cObject.ValueToString(values) );
		}
		#endregion
    }
}
