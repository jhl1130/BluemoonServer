//----------------------------------------------------------------------------------------------------
// cObject
// : 베이스 오브젝트
//  -JHL-2012-02-22
//----------------------------------------------------------------------------------------------------

using System;
using System.Reflection;

namespace BlueEngine
{
	//----------------------------------------------------------------------------------------------------
	/// <summary>
	/// 베이스 오브젝트
	/// </summary>
	//----------------------------------------------------------------------------------------------------
    public class cObject : object
    {
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 콘솔 객체
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		private static cConsole	s_console = new cConsole();

		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 콘솔 객체
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public static cConsole	Console	{get{return s_console;}set{s_console=value;}}

		//----------------------------------------------------------------------------------------------------
 		#region 문자열 변환
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	오브젝트를 문자열로 표현 한다.
		/// </summary>
		/// <returns>변환된 문자열.</returns>
        //----------------------------------------------------------------------------------------------------
        public override string ToString()
        {
			string ret = this.GetType().Name + "{";
			int c=0;
			foreach( FieldInfo field in GetType().GetFields() )
			{
				if( field.IsStatic ) continue;
				if( field.IsLiteral ) continue;

				if( c>0 ) ret += ",";
				ret += field.Name + "=" + field.GetValue(this);
				++c;
			}
			ret += "}";
			return ret;
        }
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 예외
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public virtual Exception Exception()
        {
            return Exception("");
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public virtual Exception Exception( params object[] values )
        {
			string log = cLog.LogToString( 2, values, ToString() );
            return new Exception( log );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 로그
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지 로그를 기록한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Log( params object[] values )
        {
            cLog.Log( this.GetType().Name + " > " + values );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 메시지 출력
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지를 콘솔창에 출력 한다.(클래스명+데이터)
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Print( params object[] values )
        {
            s_console.Write( this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name + " > " + ValueToString(values) );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 에러메시지를 콘솔창에 출력 한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public virtual void Error( params object[] values )
        {
            s_console.WriteColor( this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name + " > " + ValueToString(values), ConsoleColor.Red, ConsoleColor.Black );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터리스트를 문자열로 변환한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public static string ValueToString( params object[] values )
        {
			string print = "";
			for( int c=0; c<values.Length; ++c )
			{
				if( c>0 ) print += ",";	print += values[c].ToString();
			}
            return print;
		}
		#endregion
	}
}
