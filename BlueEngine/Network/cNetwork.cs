//----------------------------------------------------------------------------------------------------
// cNetwork
// : 네트워크
//  -JHL-2012-02-22
//----------------------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Text;
using System.Net.Sockets;
using System.Threading;
using System.Collections;
using System.Collections.Generic;

namespace BlueEngine
{
	//----------------------------------------------------------------------------------------------------
	/// <summary>
	/// 네트워크 베이스 객체
	/// </summary>
	//----------------------------------------------------------------------------------------------------
    public class cNetwork : cEntity
    {
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 네트워크 버전
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public const	string	VERSION		= "0.1.0";

		//----------------------------------------------------------------------------------------------------
 		#region 명령어 정의
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 네트워크 명령어
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public enum eOrder
		{
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 알려지지 않은 명령
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			UNKNOWN	= 0,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 서버 : 로그인
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			SERVER_LOGIN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 서버 : 입장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			SERVER_IN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 서버 : 퇴장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			SERVER_OUT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 클라이언트 : 정보 : 기본
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CLIENT_INFO_DEFAULT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 클라이언트 : 정보 : 상세
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CLIENT_INFO_DETAIL,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 리스트
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_LIST,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 생성 : (관리자 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_ADD,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 삭제 : (관리자 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_SUB,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 입장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_IN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 퇴장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_OUT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 채널 : 채팅
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			CHANNEL_CHAT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 리스트 (미사용)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_LIST,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 개수 : 스테이지
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_COUNT_STAGE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 추가 (미사용)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_ADD,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 삭제 (미사용)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_SUB,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 입장 (미사용)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_IN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 퇴장 (미사용)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_OUT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파티 : 채팅
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			PARTY_CHAT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 리스트
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_LIST,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 입장 : 요청
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_IN_REQUEST,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 입장 : 승락
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_IN_ACCEPT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 입장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_IN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 퇴장
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_OUT,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 이동
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_MOVE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 공격 : 몬스터
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_ATTACK_MONSTER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 스킬 사용 : 자신
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_SKILL_SELF,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 스킬 사용 : 몬스터
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_SKILL_MONSTER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 스킬 사용 : 좌표
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_SKILL_POS,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 데미지
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_DAMAGE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 아이템 사용 : 자신
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_ITEM_USE_SELF,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 유저 : 트리거 ON
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_USER_TRIGGER_ON,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 입장 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_IN,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 이동 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_MOVE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 공격 : 유저 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_ATTACK_USER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 스킬 사용 : 자신 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_SKILL_SELF,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 스킬 사용 : 유저 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_SKILL_ACTOR,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 스킬 사용 : 좌표 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_SKILL_POS,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 몬스터 : 데미지 : (파티장 권한 필요)
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_MON_DAMAGE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 스테이지 : 커스텀데이터
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			STAGE_DATA,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 오브젝트 생성
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			OBJECT_CREATE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 오브젝트 삭제
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			OBJECT_DELETE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 오브젝트 변형
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			OBJECT_UPDATE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 최대값
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			MAX_ORDER
		}
		#endregion

		//----------------------------------------------------------------------------------------------------
 		#region 결과값 정의
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 네트워크 결과값 정의
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public enum eResult
		{
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 알려지지 않은 결과
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			UNKNOWN	= 0,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 성공
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			SUCCESS,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 네트워크 : 버전
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_NETWORK_VERSION,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 클라이언트 : 버전
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CLIENT_VERSION,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM0,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM1,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM2,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM3,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM4,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM5,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM6,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM7,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM8,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 파라메타 오류
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARAM9,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 서버 : 로그인 : 다중 접속
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_SERVER_LOGIN_REFUSE,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 클라이언트 : 접속 : Policy서버
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CLIENT_CONNECT_SERVER_POLICY,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 클라이언트 : 접속 : 게임서버
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CLIENT_CONNECT_SERVER_GAME,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 클라이언트 : ID
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CLIENT_ID,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 채널 : 최대 채널 개수 초과
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CHANNEL_MAX_CHANNEL,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 채널 : 최대 유저수 초과
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CHANNEL_MAX_USER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 채널 : 채널 찾기 실패.
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CHANNEL_FIND_FAIL,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 채널 : 채널에 이미 입장되어 있음.
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_CHANNEL_IN_USER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패: 파티 : 최대 파티 개수 초과
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARTY_MAX_PARTY,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패: 파티 : 최대 유저수 초과
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARTY_MAX_USER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패: 파티 : 파티 찾기 실패.
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARTY_FIND_FAIL,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 실패 : 파티 : 파티에 이미 입장되어 있음.
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			FAIL_PARTY_IN_USER,
			//----------------------------------------------------------------------------------------------------
			/// <summary>
			/// 최대값
			/// </summary>
			//----------------------------------------------------------------------------------------------------
			MAX_RESULT
		}
		#endregion

		//----------------------------------------------------------------------------------------------------
 		#region 데이터 최대 길이
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 최대 유저 계정 아이디
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		const	ulong		MAX_ACCOUNT_ID			= ulong.MaxValue;
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 최대 동시 타겟 액터 수
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		const	byte		MAX_ACTOR_TARGET		= 10;
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 최대 데미지
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		const	uint		MAX_DAMAGE				= uint.MaxValue;
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 최대 오브젝트 아이디
		/// </summary>
		//----------------------------------------------------------------------------------------------------
		public		const	uint		MAX_OBJECT_ID			= uint.MaxValue;
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 변수
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 짧은 이름
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		protected	string				m_short_name;
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 소켓 포트 번호
		/// </summary>
        //----------------------------------------------------------------------------------------------------
        protected	ushort				m_port;
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 읽기 버퍼 길이
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		ushort				m_recv_buf_size		= 1024;
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 사용 플래그
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		bool				m_use_cryptogram	= true;
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 초기화 벡터(HEX코드)
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		static	string		s_data_iv_hex		= "0123456789ABCDEF";
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 초기화 벡터(HEX코드)
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private				string		m_data_iv_hex		= "0123456789ABCDEF";
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 비밀키(HEX코드)
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		static	string		s_data_key_hex		= "0123456789ABCDEF0123456789ABCDEF";
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 비밀키(HEX코드)
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private				string		m_data_key_hex		= "0123456789ABCDEF0123456789ABCDEF";
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 초기화 벡터
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		static	byte[]		s_data_iv			= new byte[cCryptogram.SIZE_IV];
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 초기화 벡터
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private				byte[]		m_data_iv			= new byte[cCryptogram.SIZE_IV];
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 비밀키
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private		static	byte[]		s_data_key			= new byte[cCryptogram.SIZE_KEY];
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 비밀키
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		private				byte[]		m_data_key			= new byte[cCryptogram.SIZE_KEY];
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 속성
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 짧은 이름
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public				string		ShortName			{ get{return m_short_name;} set{m_short_name=value;} }
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 소켓 포트 번호
		/// </summary>
        //----------------------------------------------------------------------------------------------------
        public				ushort		Port				{ get{return m_port;  } /*set { m_port = value; }*/ }
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 수신 버퍼 길이
		/// </summary>
        //----------------------------------------------------------------------------------------------------
        public				ushort		RecvBufSize			{ get{return m_recv_buf_size;}set{m_recv_buf_size=value;} }
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 사용 플래그
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public				bool		UseCryptogram		{ get{return m_use_cryptogram;} set{m_use_cryptogram=value;} }
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 초기화 벡터
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public				byte[]		DataIV				{ get{return m_data_iv;} }
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 로그인 암호화 비밀키
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public 				byte[]		DataKey				{ get{return m_data_key;} }
		#endregion


		//----------------------------------------------------------------------------------------------------
 		#region 초기화 함수
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 암호화 키 세팅
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public	static	void SetCryptogram( string data_iv, string data_key )
		{
			s_data_iv_hex	= data_iv;
			s_data_key_hex	= data_key;

			s_data_iv	= cCryptogram.Hex2Bin(data_iv);
			s_data_key	= cCryptogram.Hex2Bin(data_key);
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 암호화 키 세팅
		/// </summary>
        //----------------------------------------------------------------------------------------------------
		public	void SetDataKey( string data_iv, string data_key )
		{
			m_data_iv_hex	= data_iv;
			m_data_iv		= cCryptogram.Hex2Bin(data_iv);
			m_data_key_hex	= data_key;
			m_data_key		= cCryptogram.Hex2Bin(data_key);
		}
		#endregion


		//----------------------------------------------------------------------------------------------------
 		#region cNetwork() : 생성자
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 기본 생성자.
		/// </summary>
        public cNetwork():base()
        {
			m_short_name = this.GetType().ToString();
			SetDataKey( s_data_iv_hex, s_data_key_hex );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 생성자.
		/// </summary>
		/// <param name="name">이름.</param>
		/// <param name="short_name">짧은 이름.</param>
        //----------------------------------------------------------------------------------------------------
        public cNetwork( string name, string short_name ):base(name)
        {
			m_short_name = short_name;
			SetDataKey( s_data_iv_hex, s_data_key_hex );
        }
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 데이터 쓰기
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(명령코드)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteOrder( cBitStream bits, eOrder value )
		{
			bits.Write( (ushort)value, (ushort)eOrder.MAX_ORDER );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(결과코드)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteResult( cBitStream bits, eResult value )
		{
			bits.Write( (byte)value, (byte)eResult.MAX_RESULT );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(문자열)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteString( cBitStream bits, string value )
		{
			bits.Write( value );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(플래그)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteFlag( cBitStream bits, bool value )
		{
			bits.Write( value );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(클라이언트ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteClientId( cBitStream bits, uint value )
		{
			bits.Write( value, cClient.MAX_CLIENT_ID );
		}        
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(클라이언트수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteClientCount( cBitStream bits, short value )
		{
			bits.Write( value, cServer.MaxUser );
		}        
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(계정ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteAccountId( cBitStream bits, ulong value )
		{
			bits.Write( value, cUserAccount.MAX_ACCOUNT_ID );
		}        
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(채널 개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteChannelCount( cBitStream bits, byte value )
		{
			bits.Write( value, cChannel.MaxChannel );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(채널ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteChannelId( cBitStream bits, uint value )
		{
			bits.Write( value, cChannel.MAX_CHANNEL_ID );
		}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(채널 유저수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteChannelUserCount( cBitStream bits, ushort value )
		{
			bits.Write( value, cChannel.MaxUser );
		}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(파티 개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WritePartyCount( cBitStream bits, ushort value )
		{
			bits.Write( value, cParty.MaxParty );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(파티ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WritePartyId( cBitStream bits, uint value )
		{
			bits.Write( value, cParty.MAX_PARTY_ID );
		}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(파티 유저수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WritePartyUserCount( cBitStream bits, byte value )
		{
			bits.Write( value, cParty.MAX_PARTY_USER );
		}
		//----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(스테이지 개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteStageCount( cBitStream bits, ushort value )
		{
			bits.Write( value, cStage.MAX_STAGE );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(스테이지ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteStageId( cBitStream bits, uint value )
		{
			bits.Write( value, cStage.MAX_STAGE_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(몬스터ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteMonsterId( cBitStream bits, ushort value )
		{
			bits.Write( value, cMonster.MAX_MONSTER_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(몬스터정보ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteMonsterInfoId( cBitStream bits, uint value )
		{
			bits.Write( value, cMonster.MAX_MONSTER_INFO_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(트리거ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteTriggerId( cBitStream bits, ushort value )
		{
			bits.Write( value, cTrigger.MAX_TRIGGER_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(스킬ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteSkillId( cBitStream bits, ushort value )
		{
			bits.Write( value, cSkill.MAX_SKILL_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(아이템ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteItemId( cBitStream bits, ulong value )
		{
			bits.Write( value, cUserItem.MAX_ITEM_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(아이템인포ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteItemInfoId( cBitStream bits, uint value )
		{
			bits.Write( value, cItemInfo.MAX_ITEMINFO_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(아이템인포ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteItemInfoIds( cBitStream bits, uint[] value )
		{
			bits.Write( value, cItemInfo.MAX_ITEMINFO_ID );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(스테이지 위치)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="pos">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteStagePos( cBitStream bits, cVector3 pos )
		{
			bits.Write( pos.x, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
			bits.Write( pos.y, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
			bits.Write( pos.z, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(데미지)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteDamage( cBitStream bits, uint value )
		{
			bits.Write( value, MAX_DAMAGE );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 쓰기(스킬타겟개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="value">데이터</param>
        //----------------------------------------------------------------------------------------------------
		public static void WriteSkillTargetCount( cBitStream bits, byte value )
		{
			bits.Write( value, cSkill.MAX_TARGET );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region 데이터 읽기
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(명령코드)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static eOrder ReadOrder( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, (ushort)eOrder.MAX_ORDER );
			return (eOrder)value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(결과코드)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static eResult ReadResult( cBitStream bits )
		{
			byte value;
			bits.Read( out value, (byte)eResult.MAX_RESULT );
			return (eResult)value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(문자열)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static string ReadString( cBitStream bits )
		{
			string value;
			bits.Read( out value );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(플래그)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static bool ReadFlag( cBitStream bits )
		{
			bool value;
			bits.Read( out value );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(클라이언트ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadClientId( cBitStream bits )
		{
			uint value;
			bits.Read( out value, cClient.MAX_CLIENT_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(클라이언트수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadClientCount( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cServer.MaxUser );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(계정ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ulong ReadAccountId( cBitStream bits )
		{
			ulong value;
			bits.Read( out value, cUserAccount.MAX_ACCOUNT_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(채널개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static byte ReadChannelCount( cBitStream bits )
		{
			byte value;
			bits.Read( out value, cChannel.MaxChannel );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(채널아이디)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static byte ReadChannelId( cBitStream bits )
		{
			byte value;
			bits.Read( out value, cChannel.MAX_CHANNEL_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(채널유저수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadChannelUserCount( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cChannel.MaxUser );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(파티개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadPartyCount( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cParty.MaxParty );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(파티ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadPartyId( cBitStream bits )
		{
			uint value;
			bits.Read( out value, cParty.MAX_PARTY_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(파티유저수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static byte ReadPartyUserCount( cBitStream bits )
		{
			byte value;
			bits.Read( out value, cParty.MAX_PARTY_USER );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(스테이지개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadStageCount( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cStage.MAX_STAGE );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(스테이지ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadStageId( cBitStream bits )
		{
			uint value;
			bits.Read( out value, cStage.MAX_STAGE_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(몬스터ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadMonsterId( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cMonster.MAX_MONSTER_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(몬스터정보ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadMonsterInfoId( cBitStream bits )
		{
			uint value;
			bits.Read( out value, cMonster.MAX_MONSTER_INFO_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(트리거ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadTriggerId( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cTrigger.MAX_TRIGGER_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(스킬ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ushort ReadSkillId( cBitStream bits )
		{
			ushort value;
			bits.Read( out value, cSkill.MAX_SKILL_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(아이템ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static ulong ReadItemId( cBitStream bits )
		{
			ulong value;
			bits.Read( out value, cUserItem.MAX_ITEM_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(아이템인포ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadItemInfoId( cBitStream bits )
		{
			uint value;
			bits.Read( out value, cItemInfo.MAX_ITEMINFO_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(아이템인포ID)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <param name="count">개수</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint[] ReadItemInfoIds( cBitStream bits, byte count )
		{
			uint[] value = new uint[count];
			bits.Read( value, cItemInfo.MAX_ITEMINFO_ID );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(스테이지 위치)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static cVector3 ReadStagePos( cBitStream bits )
		{
			cVector3 pos = new cVector3();
			bits.Read( out pos.x, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
			bits.Read( out pos.y, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
			bits.Read( out pos.z, cStage.MAX_STAGE_POS, cStage.MAX_STAGE_POS_POINT );
			return pos;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(데미지)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static uint ReadDamage( cBitStream bits )
		{
			uint value;
			bits.Read( out value, MAX_DAMAGE );
			return value;
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 데이터 읽기(스킬타겟개수)
		/// </summary>
		/// <param name="bits">비트스트림</param>
		/// <returns>읽어온 데이터</returns>
        //----------------------------------------------------------------------------------------------------
		public static byte ReadSkillTargetCount( cBitStream bits )
		{
			byte value;
			bits.Read( out value, cSkill.MAX_TARGET );
			return value;
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region Exception() : 예외
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public override Exception Exception()
        {
            return Exception("");
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		///	예외처리를 위한 예외를 발생 시킨다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
		/// <returns>예외처리 객체.</returns>
        //----------------------------------------------------------------------------------------------------
        public override Exception Exception( params object[] values )
        {
            return new Exception( cLog.LogToString( 2, Thread.CurrentThread.ManagedThreadId.ToString("d05") + "|" + m_short_name + " > " + cObject.ValueToString(values) ) );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region Log() : 로그
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지 로그를 기록한다.
		/// </summary>
		/// <param name="values">데이터리스트.</param>
        //----------------------------------------------------------------------------------------------------
        public override void Log( params object[] values )
        {
            cLog.Log( Thread.CurrentThread.ManagedThreadId.ToString("d05") + "|" + m_short_name + " > " + cObject.ValueToString(values) );
		}
		#endregion

        //----------------------------------------------------------------------------------------------------
 		#region Print() : 메시지 출력
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 메시지를 콘솔창에 출력 한다.
		/// </summary>
		/// <param name="values">데이터리스트</param>
        //----------------------------------------------------------------------------------------------------
        public override void Print( params object[] values )
        {
            Console.Write( Thread.CurrentThread.ManagedThreadId.ToString("d05") + "|" + m_short_name + " > " + cObject.ValueToString(values) );
		}
        //----------------------------------------------------------------------------------------------------
		/// <summary>
		/// 에러메시지를 콘솔창에 출력 한다.
		/// </summary>
		/// <param name="values">데이터리스트</param>
        //----------------------------------------------------------------------------------------------------
        public override void Error( params object[] values )
        {
            Console.WriteColor( Thread.CurrentThread.ManagedThreadId.ToString("d05") + "|" + m_short_name + " > " +  cObject.ValueToString(values), ConsoleColor.Red, ConsoleColor.Black );
		}
		#endregion
    }
}
